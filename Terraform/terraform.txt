üåç What is Terraform?
Terraform is an open-source Infrastructure as Code (IaC) tool developed by HashiCorp.
 It allows you to define and provision data center infrastructure using a declarative 
 configuration language (HCL - HashiCorp Configuration Language).

üõ†Ô∏è Usage of Terraform
Terraform is used for:

Infrastructure Provisioning:

Automates the setup of cloud resources like EC2, VPC, S3 in AWS, or virtual machines
 in Azure/GCP.

Multi-Cloud Deployments:

Manage infrastructure across multiple providers (AWS, Azure, GCP, etc.).

Immutable Infrastructure:

Replace infrastructure instead of updating it, ensuring consistency.

Version-Controlled Infrastructure:

Store infrastructure configuration in Git, enabling CI/CD pipelines.

Infrastructure Auditing & Documentation:

Automatically generate graphs and state files to visualize and audit your 
infrastructure.

‚úÖ Advantages of Terraform
Advantage	Description
1. Platform Agnostic	Supports multiple cloud providers and on-prem solutions.
2. Infrastructure as Code	Declarative configuration (HCL) improves readability 
and automation.
3. Version Control	Changes can be tracked using Git, making collaboration easier.
4. Automation	Automates the provisioning and destruction of infrastructure.
5. Reusability	Modules allow reusable and modular code across environments.
6. Execution Plan	Shows a preview of changes before applying them (via terraform plan).
7. Community Support	Large ecosystem with many modules and provider plugins.

‚≠ê Key Features of Terraform
Feature	Description
1. HCL (HashiCorp Configuration Language)	Human-readable, declarative language to
 define infrastructure.
2. Providers	Interfaces with cloud APIs (AWS, Azure, GCP, etc.).
3. State Management	Tracks infrastructure state in .tfstate files to detect changes.
4. Modules	Encapsulate and reuse configurations across projects.
5. Dependency Management	Automatically understands and handles resource dependencies.
6. Resource Graph	Visual representation of dependencies between resources.
7. CLI Tools	Commands like init, plan, apply, and destroy simplify workflows.

‚ùå Disadvantages of Terraform
Disadvantage	Description
1. State File Risks	Storing .tfstate locally can lead to conflicts or data loss
 (unless managed remotely via Terraform Cloud or S3 + DynamoDB).
2. Learning Curve	HCL syntax and understanding state, modules, etc., can be
 challenging for beginners.
3. Limited Error Handling	Debugging complex errors is sometimes difficult due to
 lack of detailed logs.
4. Drift Issues	Manual changes in infrastructure can cause drift from Terraform state.
5. Complex Management in Large Projects	Managing multiple environments and workspaces
 can be complex without best practices.

üìå Summary Table
Aspect	Summary
Tool	Terraform by HashiCorp
Category	Infrastructure as Code (IaC)
Language	HCL (HashiCorp Configuration Language)
Use Cases	Provisioning, multi-cloud management, automation
Pros	Cross-platform, reusable, automated, version-controlled
Cons	State handling risks, learning curve, drift management